package com.sis.exception;
//1

/*
 * 		예외처리
 * 	 		= 자바의 모든 소스에는 예외처리가 있다(생략이 가능, 생략이 불가능 )(두가지 종류가 있다)
 * 			= 프로그램을 실행하는 과정에서 오작동, 비정상적으로 종료 하는 것을 => 에러/오류
 * 			  *** 윈도우 의 경우 : 쓰레드의 충돌, 주소값
 * 			    오작동 , 비정상적으로 수행
 * 		      =================
 * 				= 프로그래머의 실수
 * 				= 사용자의 오류(입력값, 작동을 잘못했을 경우)
 * 				예) 33대란
 * 				   ===== 은행이 오작동 (신한은행, 농협)
 * 
 * 			에러의 종류
 * 			=======
 * 				컴파일 에러 : 컴파일시에 에러 (문법상의 에러)
 * 				실행시 에러 : 실행시에 발생하는 에러 = 사용자 (비정상 입력)에러
 * 				논리적 에러 : 실행이 되는데 동작을 다르게... ===> 프로그램의 순서가 틀린 경우
 * 
 * 
 * 			실제 에러종류
 * 			========
 * 
 * 				에러 : 프로그래머가 소스상에서 수정할 수 없는 에러
 * 					 = 메모리가 부족현상
 * 					 = 이클립스 에러
 * 				==========================================> 에러는 처리 불가능
 * 
 * 				예외 : 가벼운 에러(수정이 가능한 에러)
 * 					 = 소스상에서 수정이 가능
 * 					 = 사용자가 0을 입력했을때 => 다시 입력하시오
 * 					 = 아이디 중복체크
 * 					 = 파일 입출력(경로명)
 * 					 = 서버(IP)
 *     				 = 오라클 (오라클주소, SQL)
 *     		
 *     		예외처리
 *     		=====
 *     			
 *     			Check : 컴파일러가 예외처리를 했는지 확인 => 반드시 예외처리를 해야 한다
 *     				= 파일 입출력, 메모리 입출력, 네트워크 입출력
 *     				= 데이터베이스연결
 *     				= 쓰레드 충동
 * 				UnCheck : 실행시 -> 컴파일러가 예외처리를 확인하지 않는다
 * 							예외처리 생략이 가능 => 필요한 경우에만 예외처리를 할 수 있다   
 * 					= 사용자의 입력 ==> 문자열 ==> 정수변환
 * 								       나누기 ==> 0을 입력
 * 
 *  		예외처리
 *  			목적 : 프로그램의 비정상 종료를 방지하고 정상상태를 유지할 수 있게 만든다
 *  				 (견고한 프로그램)
 *  			정의 : 사전에 예상되는 에러를 대비하는 코드를 만든다
 *  
 *  		
 *  		예외처리 방법
 *  		========
 *  
 *  			예외 복구 : 점프 => 에러가 발생하는 점을 건너띈다 => 프로그래머가 예외가 발생항 경우에 직접 처리 => 정상 상태 유지
 *  					
 *  					try~catch~finaly
 *  					==> 직접처리
 *  
 *  			예외 회피 : 다른 메소드로 전송 => 자바시스템에 의해서 처리
 *  					
 *  					throws
 *  					==> 간접처리
 *  
 *  			예외 임의발생 : 테스트용
 *  
 *  					throw
 *  
 *  			사용저 정의 예외 : 자바라이브러리에서 전체 에러를 지원하지 않는 경우
 *  			=======
 *  				=> 데이터형 => 직접 데이터형 제작 (클래스)
 *  				=> 메소드 => 사용자가 직접 제작
 *  				=> 연산자, 제어문(X) 
 *  
 *  		예외처리 
 *  		=====
 *  		 try ~ catch ~ finally(finally는 생략 가능)
 *  		 try  ==>  평상시 자바 코딩 ==> 에러
 *  		 catch ==> 에러 발생시 처리 부분 ==> 여러개 사용이 가능
 *  		 finally ==> 에러가 발생하든 않든 무조건 수행되는 문자
 *  					  네트워크,데이터베이스 프로그램에서는 반드시 존재
 *  					  서버를 연결 해제
 *  					============ 디도스
 * 			
 * 			===> try~catch
 * 				 =========
 * 					1) 전체 예외처리
 * 					2) 부분벅 예외처리
 * 
 *  		try
 *  		{
 *  			for(int i=9;i<10;i++)
 *  			{
 *  				i=3 error //===> i=0,1,2
 *  			} //==> 종료 , 위치에 따라 수행하는 용도를 잘 봐야한다
 *  		}catch(Exception(Exception e) {}
 *  
 *  			for(int i=9;i<10;i++)
 *  			{
 *  				i=3 error //===> i=0,1,2 ==> 4~9
 *  			}catch(Exception(Exception e) {} //==> i++ 
 *  		}
 *  						
 *     
 */

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub\
		
		//예외처리 경우
		try
		{
			int a=10; //1
			int b=0;  //2	
			int c=a/b; //3 ===> error => catc이동\
			System.out.println("c="+c); //실행이 안되는 문장
			
		}
		catch(Exception ex)
		{
			System.out.println("0으로 나눌 수 없다"); //4
		}
		
		System.out.println("프로그램 정상 종료"); //5
		
		//예외처리가 없는경우
//		int a=10;
//		int b=0;
//		int c=a/b;
//		System.out.println("c="+c);
//		System.out.println("정상적으로 프로그램 종료!!!");
		
	}

}
